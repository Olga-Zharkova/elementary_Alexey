import 'dart:io';

import 'package:archive/archive_io.dart';
import 'package:args/args.dart';
import 'package:args/command_runner.dart';
import 'package:node_preamble/preamble.dart';
import 'package:path/path.dart' as p;

/// Main entry for `dart2cloud` command
Future<void> main(List<String> arguments) async {
  const commandName = 'dart2cloud';
  const commandDescription =
      'CLI utilities for compiling dart functions to nodejs functions';

  final runner = CommandRunner<void>(commandName, commandDescription)
    ..addCommand(BuildCommand())..addCommand(ZipCommand());
  await runner.run(arguments);

  stdout.write('$commandName: Success\n');
}

/// Example: `build --source lib/feed.dart --out-dir js`
class BuildCommand extends Command {
  @override
  String get description => 'builds js code from dart sources';

  @override
  String get name => 'build';

  @override
  bool get takesArguments => false;

  @override
  ArgParser get argParser {
    return ArgParser()
      ..addOption(
        'source',
        abbr: 's',
        mandatory: true,
        help: 'Path to source dart file',
        valueHelp: 'dir1/my_module.dart',
      )..addOption(
        'out-dir',
        abbr: 'o',
        defaultsTo: './js',
        help: 'Path to directory where output files will be placed',
        valueHelp: 'dir1/dir2',
      );
  }

  @override
  Future<void> run() async {
    final parsed = argResults!;
    final fileOption = parsed['source'] as String;
    final outputDirectoryOption = parsed['out-dir'] as String;

    final outputDirectory = Directory(outputDirectoryOption);
    if (!(await outputDirectory.exists())) {
      await outputDirectory.create(recursive: true);
    }

    final sourceDartFile = File(fileOption);

    final sourceBasename = p.basename(sourceDartFile.path);
    if (!sourceBasename.endsWith('.dart')) {
      return;
    }
    final endpointName = sourceBasename.replaceAll('.dart', '');
    final sourceJsFile = File(p.join(
      outputDirectory.path,
      endpointName + '.tmp.js',
    ));

    final compileProcess = await Process.run('dart', [
      'compile',
      'js',
      sourceDartFile.path,
      '-o',
      sourceJsFile.path,
      '--server-mode',
      '--verbose',
      '--no-source-maps',
    ]);
    stdout.write(compileProcess.stdout);
    stderr.write(compileProcess.stderr);

    final sourceContent = await sourceJsFile.readAsString();
    await sourceJsFile.delete();

    final outputFile = File(p.join(outputDirectory.path, endpointName + '.js'));

    final notice = jsNoticeSnippetSource;
    final preamble = getPreamble();
    final outContent = notice + preamble + sourceContent;
    outputFile.writeAsString(outContent);
  }
}

final jsNoticeSnippetSource = '''
// Generated by dart2cloud tool. Do not modify by hand.

''';

/// Example: `zip --source js/feed.js --target build/feed.zip`
class ZipCommand extends Command {
  @override
  String get description => 'zips file or directory';

  @override
  String get name => 'zip';

  @override
  bool get takesArguments => false;

  @override
  ArgParser get argParser {
    return ArgParser()
      ..addOption(
        'source',
        abbr: 's',
        mandatory: true,
        help: 'Path to source file or directory',
        valueHelp: 'dir1/my_module.js',
      )..addOption(
        'target',
        abbr: 't',
        defaultsTo: '',
        help: 'Path to target zip file',
        valueHelp: 'dir1/my_module.zip',
      );
  }

  @override
  Future<void> run() async {
    final parsed = argResults!;
    final sourceOption = parsed['source'] as String;
    final targetOption = parsed['target'] as String;

    final entity = _getSourceEntity(sourceOption);

    final targetPath = targetOption == ''
        ? '${p.basename(entity.path)}.zip'
        : targetOption;

    final encoder = ZipFileEncoder();
    if (entity is Directory) {
      encoder.zipDirectory(entity, filename: targetPath);
    } else if (entity is File) {
      encoder.create(targetPath);
      encoder.addFile(entity);
      encoder.close();
    }
  }

  FileSystemEntity _getSourceEntity(String path) {
    final maybeFile = File(path);
    if (maybeFile.existsSync()) {
      return maybeFile;
    }
    final maybeDirectory = Directory(path);
    if (maybeDirectory.existsSync()) {
      return maybeDirectory;
    }
    throw 'not a file or directory';
  }
}
